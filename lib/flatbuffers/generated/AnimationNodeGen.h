// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANIMATIONNODE_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_ANIMATIONNODE_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "DataArrayGen.h"
#include "PropertyGen.h"

namespace rlogic_serialization {

struct Channel;
struct ChannelBuilder;

struct AnimationNode;
struct AnimationNodeBuilder;

enum class EInterpolationType : uint8_t {
  Step = 0,
  Linear = 1,
  Cubic = 2,
  Linear_Quaternions = 3,
  Cubic_Quaternions = 4,
  MIN = Step,
  MAX = Cubic_Quaternions
};

inline const EInterpolationType (&EnumValuesEInterpolationType())[5] {
  static const EInterpolationType values[] = {
    EInterpolationType::Step,
    EInterpolationType::Linear,
    EInterpolationType::Cubic,
    EInterpolationType::Linear_Quaternions,
    EInterpolationType::Cubic_Quaternions
  };
  return values;
}

inline const char * const *EnumNamesEInterpolationType() {
  static const char * const names[6] = {
    "Step",
    "Linear",
    "Cubic",
    "Linear_Quaternions",
    "Cubic_Quaternions",
    nullptr
  };
  return names;
}

inline const char *EnumNameEInterpolationType(EInterpolationType e) {
  if (flatbuffers::IsOutRange(e, EInterpolationType::Step, EInterpolationType::Cubic_Quaternions)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEInterpolationType()[index];
}

struct Channel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ChannelBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TIMESTAMPS = 6,
    VT_KEYFRAMES = 8,
    VT_INTERPOLATIONTYPE = 10,
    VT_TANGENTSIN = 12,
    VT_TANGENTSOUT = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const rlogic_serialization::DataArray *timestamps() const {
    return GetPointer<const rlogic_serialization::DataArray *>(VT_TIMESTAMPS);
  }
  const rlogic_serialization::DataArray *keyframes() const {
    return GetPointer<const rlogic_serialization::DataArray *>(VT_KEYFRAMES);
  }
  rlogic_serialization::EInterpolationType interpolationType() const {
    return static_cast<rlogic_serialization::EInterpolationType>(GetField<uint8_t>(VT_INTERPOLATIONTYPE, 0));
  }
  const rlogic_serialization::DataArray *tangentsIn() const {
    return GetPointer<const rlogic_serialization::DataArray *>(VT_TANGENTSIN);
  }
  const rlogic_serialization::DataArray *tangentsOut() const {
    return GetPointer<const rlogic_serialization::DataArray *>(VT_TANGENTSOUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TIMESTAMPS) &&
           verifier.VerifyTable(timestamps()) &&
           VerifyOffset(verifier, VT_KEYFRAMES) &&
           verifier.VerifyTable(keyframes()) &&
           VerifyField<uint8_t>(verifier, VT_INTERPOLATIONTYPE) &&
           VerifyOffset(verifier, VT_TANGENTSIN) &&
           verifier.VerifyTable(tangentsIn()) &&
           VerifyOffset(verifier, VT_TANGENTSOUT) &&
           verifier.VerifyTable(tangentsOut()) &&
           verifier.EndTable();
  }
};

struct ChannelBuilder {
  typedef Channel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Channel::VT_NAME, name);
  }
  void add_timestamps(flatbuffers::Offset<rlogic_serialization::DataArray> timestamps) {
    fbb_.AddOffset(Channel::VT_TIMESTAMPS, timestamps);
  }
  void add_keyframes(flatbuffers::Offset<rlogic_serialization::DataArray> keyframes) {
    fbb_.AddOffset(Channel::VT_KEYFRAMES, keyframes);
  }
  void add_interpolationType(rlogic_serialization::EInterpolationType interpolationType) {
    fbb_.AddElement<uint8_t>(Channel::VT_INTERPOLATIONTYPE, static_cast<uint8_t>(interpolationType), 0);
  }
  void add_tangentsIn(flatbuffers::Offset<rlogic_serialization::DataArray> tangentsIn) {
    fbb_.AddOffset(Channel::VT_TANGENTSIN, tangentsIn);
  }
  void add_tangentsOut(flatbuffers::Offset<rlogic_serialization::DataArray> tangentsOut) {
    fbb_.AddOffset(Channel::VT_TANGENTSOUT, tangentsOut);
  }
  explicit ChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChannelBuilder &operator=(const ChannelBuilder &);
  flatbuffers::Offset<Channel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Channel>(end);
    return o;
  }
};

inline flatbuffers::Offset<Channel> CreateChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<rlogic_serialization::DataArray> timestamps = 0,
    flatbuffers::Offset<rlogic_serialization::DataArray> keyframes = 0,
    rlogic_serialization::EInterpolationType interpolationType = rlogic_serialization::EInterpolationType::Step,
    flatbuffers::Offset<rlogic_serialization::DataArray> tangentsIn = 0,
    flatbuffers::Offset<rlogic_serialization::DataArray> tangentsOut = 0) {
  ChannelBuilder builder_(_fbb);
  builder_.add_tangentsOut(tangentsOut);
  builder_.add_tangentsIn(tangentsIn);
  builder_.add_keyframes(keyframes);
  builder_.add_timestamps(timestamps);
  builder_.add_name(name);
  builder_.add_interpolationType(interpolationType);
  return builder_.Finish();
}

struct Channel::Traits {
  using type = Channel;
  static auto constexpr Create = CreateChannel;
};

inline flatbuffers::Offset<Channel> CreateChannelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<rlogic_serialization::DataArray> timestamps = 0,
    flatbuffers::Offset<rlogic_serialization::DataArray> keyframes = 0,
    rlogic_serialization::EInterpolationType interpolationType = rlogic_serialization::EInterpolationType::Step,
    flatbuffers::Offset<rlogic_serialization::DataArray> tangentsIn = 0,
    flatbuffers::Offset<rlogic_serialization::DataArray> tangentsOut = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rlogic_serialization::CreateChannel(
      _fbb,
      name__,
      timestamps,
      keyframes,
      interpolationType,
      tangentsIn,
      tangentsOut);
}

struct AnimationNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnimationNodeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ID = 6,
    VT_CHANNELS = 8,
    VT_ROOTINPUT = 10,
    VT_ROOTOUTPUT = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::Channel>> *channels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::Channel>> *>(VT_CHANNELS);
  }
  const rlogic_serialization::Property *rootInput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTINPUT);
  }
  const rlogic_serialization::Property *rootOutput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTOUTPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_CHANNELS) &&
           verifier.VerifyVector(channels()) &&
           verifier.VerifyVectorOfTables(channels()) &&
           VerifyOffset(verifier, VT_ROOTINPUT) &&
           verifier.VerifyTable(rootInput()) &&
           VerifyOffset(verifier, VT_ROOTOUTPUT) &&
           verifier.VerifyTable(rootOutput()) &&
           verifier.EndTable();
  }
};

struct AnimationNodeBuilder {
  typedef AnimationNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AnimationNode::VT_NAME, name);
  }
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(AnimationNode::VT_ID, id, 0);
  }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::Channel>>> channels) {
    fbb_.AddOffset(AnimationNode::VT_CHANNELS, channels);
  }
  void add_rootInput(flatbuffers::Offset<rlogic_serialization::Property> rootInput) {
    fbb_.AddOffset(AnimationNode::VT_ROOTINPUT, rootInput);
  }
  void add_rootOutput(flatbuffers::Offset<rlogic_serialization::Property> rootOutput) {
    fbb_.AddOffset(AnimationNode::VT_ROOTOUTPUT, rootOutput);
  }
  explicit AnimationNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnimationNodeBuilder &operator=(const AnimationNodeBuilder &);
  flatbuffers::Offset<AnimationNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnimationNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnimationNode> CreateAnimationNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::Channel>>> channels = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootOutput = 0) {
  AnimationNodeBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_rootOutput(rootOutput);
  builder_.add_rootInput(rootInput);
  builder_.add_channels(channels);
  builder_.add_name(name);
  return builder_.Finish();
}

struct AnimationNode::Traits {
  using type = AnimationNode;
  static auto constexpr Create = CreateAnimationNode;
};

inline flatbuffers::Offset<AnimationNode> CreateAnimationNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t id = 0,
    const std::vector<flatbuffers::Offset<rlogic_serialization::Channel>> *channels = nullptr,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootOutput = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto channels__ = channels ? _fbb.CreateVector<flatbuffers::Offset<rlogic_serialization::Channel>>(*channels) : 0;
  return rlogic_serialization::CreateAnimationNode(
      _fbb,
      name__,
      id,
      channels__,
      rootInput,
      rootOutput);
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_ANIMATIONNODE_RLOGIC_SERIALIZATION_H_
