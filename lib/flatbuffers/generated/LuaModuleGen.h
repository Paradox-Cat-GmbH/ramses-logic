// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LUAMODULE_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LUAMODULE_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace rlogic_serialization {

struct LuaModule;
struct LuaModuleBuilder;

struct LuaModuleUsage;
struct LuaModuleUsageBuilder;

struct LuaModule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LuaModuleBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ID = 6,
    VT_SOURCE = 8,
    VT_DEPENDENCIES = 10,
    VT_STANDARDMODULES = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::LuaModuleUsage>> *dependencies() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::LuaModuleUsage>> *>(VT_DEPENDENCIES);
  }
  const flatbuffers::Vector<uint8_t> *standardModules() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_STANDARDMODULES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_DEPENDENCIES) &&
           verifier.VerifyVector(dependencies()) &&
           verifier.VerifyVectorOfTables(dependencies()) &&
           VerifyOffset(verifier, VT_STANDARDMODULES) &&
           verifier.VerifyVector(standardModules()) &&
           verifier.EndTable();
  }
};

struct LuaModuleBuilder {
  typedef LuaModule Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LuaModule::VT_NAME, name);
  }
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(LuaModule::VT_ID, id, 0);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(LuaModule::VT_SOURCE, source);
  }
  void add_dependencies(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::LuaModuleUsage>>> dependencies) {
    fbb_.AddOffset(LuaModule::VT_DEPENDENCIES, dependencies);
  }
  void add_standardModules(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> standardModules) {
    fbb_.AddOffset(LuaModule::VT_STANDARDMODULES, standardModules);
  }
  explicit LuaModuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LuaModuleBuilder &operator=(const LuaModuleBuilder &);
  flatbuffers::Offset<LuaModule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LuaModule>(end);
    return o;
  }
};

inline flatbuffers::Offset<LuaModule> CreateLuaModule(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic_serialization::LuaModuleUsage>>> dependencies = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> standardModules = 0) {
  LuaModuleBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_standardModules(standardModules);
  builder_.add_dependencies(dependencies);
  builder_.add_source(source);
  builder_.add_name(name);
  return builder_.Finish();
}

struct LuaModule::Traits {
  using type = LuaModule;
  static auto constexpr Create = CreateLuaModule;
};

inline flatbuffers::Offset<LuaModule> CreateLuaModuleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t id = 0,
    const char *source = nullptr,
    const std::vector<flatbuffers::Offset<rlogic_serialization::LuaModuleUsage>> *dependencies = nullptr,
    const std::vector<uint8_t> *standardModules = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto dependencies__ = dependencies ? _fbb.CreateVector<flatbuffers::Offset<rlogic_serialization::LuaModuleUsage>>(*dependencies) : 0;
  auto standardModules__ = standardModules ? _fbb.CreateVector<uint8_t>(*standardModules) : 0;
  return rlogic_serialization::CreateLuaModule(
      _fbb,
      name__,
      id,
      source__,
      dependencies__,
      standardModules__);
}

struct LuaModuleUsage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LuaModuleUsageBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MODULE_ = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const rlogic_serialization::LuaModule *module_() const {
    return GetPointer<const rlogic_serialization::LuaModule *>(VT_MODULE_);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_MODULE_) &&
           verifier.VerifyTable(module_()) &&
           verifier.EndTable();
  }
};

struct LuaModuleUsageBuilder {
  typedef LuaModuleUsage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LuaModuleUsage::VT_NAME, name);
  }
  void add_module_(flatbuffers::Offset<rlogic_serialization::LuaModule> module_) {
    fbb_.AddOffset(LuaModuleUsage::VT_MODULE_, module_);
  }
  explicit LuaModuleUsageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LuaModuleUsageBuilder &operator=(const LuaModuleUsageBuilder &);
  flatbuffers::Offset<LuaModuleUsage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LuaModuleUsage>(end);
    return o;
  }
};

inline flatbuffers::Offset<LuaModuleUsage> CreateLuaModuleUsage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<rlogic_serialization::LuaModule> module_ = 0) {
  LuaModuleUsageBuilder builder_(_fbb);
  builder_.add_module_(module_);
  builder_.add_name(name);
  return builder_.Finish();
}

struct LuaModuleUsage::Traits {
  using type = LuaModuleUsage;
  static auto constexpr Create = CreateLuaModuleUsage;
};

inline flatbuffers::Offset<LuaModuleUsage> CreateLuaModuleUsageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<rlogic_serialization::LuaModule> module_ = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rlogic_serialization::CreateLuaModuleUsage(
      _fbb,
      name__,
      module_);
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_LUAMODULE_RLOGIC_SERIALIZATION_H_
